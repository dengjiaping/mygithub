1. 修饰方法
同一个对象中所有加了synchronized关键字的方法在同一时间内只能被同一线程调用，如果有线程在调用其中一个方法，其它线程调用所有加了sychronized方法时会阻塞

synchronized void a(){};

相当于void a() {
	synchronized(this) {
	
	}
}

2. 修饰代码块
a. synchronized(object)
所有sync该object的代码块是同步的

b. synchronized(Class)
所有sync该class的代码块是同步的


demo:


public class test {

	private int i = 0;
	public synchronized void A() {
		
		System.out.println("enter " + Thread.currentThread().getId());
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("out " + Thread.currentThread().getId());
	}
	
	public void B() {
		synchronized(this) {
			
			System.out.println("enter B");
			System.out.println("out B");
		}
	}
	private static final int LOOP_COUNT = 1000;
	public static void main(String args[]) {
		final test t = new test();
		final test tt = new test();
		Thread addThread = new Thread() {
			public void run() {
				for(int i = 0; i < LOOP_COUNT; i++) {
					t.A();
				}
			};
		};
		
		Thread minusThread = new Thread() {
			public void run() {
				for(int i = 0; i < LOOP_COUNT; i++) {
					t.B();
				}
			};
		};
		
		addThread.start();
		minusThread.start();
	}
}

