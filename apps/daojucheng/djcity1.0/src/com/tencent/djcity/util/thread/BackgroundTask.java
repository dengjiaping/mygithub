package com.tencent.djcity.util.thread;

/**
 * SyncBackgroundTask?????¨å????°è??è¡????ä»»å?¡ï??è¯¥ä»»??¡ä????¹æ??executorId???ä¸????è¢?å®??????¨ä?????çº¿ç??ï¼?
 * ??¸å??executorId???ä»»å?¡ä??è¿?è¡???¨ç?¸å?????çº¿ç??ï¼?å¹¶ä????¹æ??executeè°???¨æ?¹æ???????????é¡ºå?????è¿?è¡???????ï¼????è°???¨ç??ä¼??????§è??
 * 
 * @author carlosliu
 *
 */
public abstract class BackgroundTask<PARAMS, RESULT> {
	
	private boolean mIsCanceled;
	public static final int DEFAULT_EXECUTOR_ID = 1001;
	
	private int mExecutorId = DEFAULT_EXECUTOR_ID;
	
	public int getExecutorId() {
		return mExecutorId;
	}

	public void setExecutorId(int executorId) {
		this.mExecutorId = executorId;
	}

	public final void cancel() {
		mIsCanceled = true;
		mExecutor.remove(this);
	}
	
	public boolean isCanceled() {
		return mIsCanceled;
	}
	
	private TaskExecutor mExecutor;
	
	public BackgroundTask() {
		mExecutor = TaskExecutor.getInstance(mExecutorId);
	}
	
	/**
	 * ä¼?è¢?TaskExecutorè°????ï¼?è¿?è¡?äº??????°çº¿ç¨?
	 */
	void callbackFromBackgroundThread() {
		result = doInBackground(params);
	}
	
	/**
	 * å½?doInBackgroundè°???¨å??æ¯????ï¼?ä¼?è°????onPosExecute??¹æ????????UIçº¿ç??
	 */
	void backToUIThread() {
		onPostExecute(result);
	}
	
	protected abstract RESULT doInBackground(PARAMS... params);
	protected abstract void onPostExecute(RESULT result);
	
	private PARAMS[] params;
	private RESULT result;
	/**
	 * å°?ä»»å?¡æ·»?????°é?????ï¼?å¦????çº¿ç????????ï¼?ä¼???¤é??çº¿ç??ç»§ç»­??§è??ä»»å??
	 * @param params
	 */
	public void execute(PARAMS... params) {
		this.params = params;
		if(mExecutor != null) {
			mExecutor.execute(this);
		}
	}
	
	/**
	 * å°?è¯¥ä»»??¡æ????¨é??????????????ï¼?å¦????çº¿ç????????ï¼?ä¼???¤é??çº¿ç??ç»§ç»­??§è??ä»»å??
	 * @param params
	 */
	public void executeNow(PARAMS... params) {
		this.params = params;
		if(mExecutor != null) {
			mExecutor.executeNow(this);
		}
	}
}
